(()=>{"use strict";const e={formSelector:".popup__form",inputSelector:".popup__field",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",inputErrorClass:"popup__field_type_error",errorClass:"popup__error_visible"},t="#card-template",s=document.querySelector(".profile"),r=s.querySelector(".profile__edit-button"),i=s.querySelector(".profile__add-button"),o=s.querySelector(".profile__avatar-block"),n=document.querySelector("#profile-popup").querySelector(".popup__form"),u=document.querySelector("#profile-avatar-popup").querySelector(".popup__form"),a=document.querySelector("#newplace-popup").querySelector(".popup__form");class l{constructor(e,t,s,r,i,o,n){this._title=e.name,this._image=e.link,this._cardId=e._id,this._ownerId=e.owner._id,this._likes=e.likes,this._userId=t,this._template=s,this._handleCardClick=r,this._handleCardDeleteClick=i,this._addCardLike=o,this._removeCardLike=n}_getTemplate(){return document.querySelector(this._template).content.querySelector(".element").cloneNode(!0)}createCard(){return this._element=this._getTemplate(),this._elementImage=this._element.querySelector(".element__image"),this._elementImage.src=this._image,this._elementImage.alt=this._title,this._element.querySelector(".element__title").textContent=this._title,this._likesCounter=this._element.querySelector(".element__likes-counter"),this._likesCounter.textContent=this._likes.length,this._likeButton=this._element.querySelector(".element__heart-button"),this._deleteButton=this._element.querySelector(".element__delete-button"),this._setEventListeners(),this._element}_setEventListeners(){this._likes.forEach((e=>{e._id===this._userId&&this._likeButton.classList.add("element__heart-button_active")})),this._likeButton.addEventListener("click",(()=>{this._likeCard(this)})),this._ownerId===this._userId?this._deleteButton.addEventListener("click",(e=>{e.preventDefault(),this._handleCardDeleteClick(e,this._cardId)})):this._deleteButton.classList.add("element__delete-button_disable"),this._element.querySelector(".element__image").addEventListener("click",(()=>{this._handleCardClick(this._title,this._image)}))}updateLikes(e){this._likeButton.classList.toggle("element__heart-button_active"),this._likes=e.likes,this._likesCounter.textContent=this._likes.length}_likeCard=()=>{this._likeButton.classList.contains("element__heart-button_active")?this._removeCardLike(this):this._addCardLike(this)}}class p{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}enableValidation(){this._setEventListeners()}_setEventListeners(){this._formInputFields=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._formSubmitButton=this._formElement.querySelector(this._submitButtonSelector),this._formInputFields.forEach((e=>{e.addEventListener("input",(()=>{this._inputField=e,this._checkInputValidity(),this._hasInvalidInput(this._formInputFields)?this._disableButton(this._formSubmitButton):this._enableButton(this._formSubmitButton)}))}))}_checkInputValidity(){this._inputField.validity.valid?this._removeErrorMessageAndRedUnderline():this._showErrorMessageAndRedUnderline()}_showErrorMessageAndRedUnderline(){this._error=this._formElement.querySelector(`#${this._inputField.id}-error`),this._error.classList.add(this._errorClass),this._error.textContent=this._inputField.validationMessage,this._inputField.classList.add(this._inputErrorClass)}_removeErrorMessageAndRedUnderline(){this._error=this._formElement.querySelector(`#${this._inputField.id}-error`),this._error.classList.remove(this._errorClass),this._error.textContent="",this._inputField.classList.remove(this._inputErrorClass)}_enableButton(){this._formSubmitButton.classList.remove(this._inactiveButtonClass),this._formSubmitButton.removeAttribute("disabled")}_disableButton(){this._formSubmitButton.classList.add(this._inactiveButtonClass),this._formSubmitButton.setAttribute("disabled",!0)}resetErrorsOnInputFields(){this._formInputFields.forEach((e=>{this._inputField=e,e.validity.valid||this._removeErrorMessageAndRedUnderline()})),this._disableButton()}_hasInvalidInput=()=>this._formInputFields.some((e=>!e.validity.valid))}class _{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".popup__close-button")}openPopup(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}closePopup(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.closePopup()};_handleCloseButton=()=>{this.closePopup()};_handleClickOnOverlay=e=>{e.target===e.currentTarget&&this.closePopup()};setEventListeners(){this._closeButton.addEventListener("click",this._handleCloseButton),this._popup.addEventListener("click",this._handleClickOnOverlay)}}class h extends _{constructor(e){let{popupSelector:t,handlePopupFormSubmit:s}=e;super(t),this._form=this._popup.querySelector(".popup__form"),this._inputList=this._popup.querySelectorAll(".popup__field"),this._handlePopupFormSubmit=s,this._submitButton=this._form.querySelector(".popup__submit-button"),this._submitButtonText=this._submitButton.textContent}renderLoading(e,t){this._submitButton.textContent=e?t:this._submitButtonText}getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handlePopupFormSubmit(this.getInputValues())}))}closePopup(){this._form.reset(),super.closePopup()}}class d{constructor(e,t,s){let{items:r,renderer:i}=e;this._items=r,this._renderer=i,this._userId=t,this._container=document.querySelector(s)}renderItems(e,t,s){"append"===s?this._items.forEach((e=>{this._container.append(this._renderer(e,t))})):this._container.prepend(this._renderer(e,t))}}const c=new class{constructor(e){this._apiUrl=e.apiUrl,this._headers=e.headers}_getRes(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(`${this._apiUrl}/${e}`,t).then(this._getRes)}getUserInfo(){return this._request("users/me",{method:"GET",headers:this._headers})}setUserInfo(e){return this._request("users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}setUserAvatar(e){return this._request("users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}getInitialCards(){return this._request("cards",{method:"GET",headers:this._headers})}addCard(e){return this._request("cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}removeCard(e){return this._request(`cards/${e}`,{method:"DELETE",headers:this._headers})}addLike(e){return this._request(`cards/${e}/likes`,{method:"PUT",headers:this._headers})}removeLike(e){return this._request(`cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}({apiUrl:"https://mesto.nomoreparties.co/v1/cohort-66",headers:{authorization:"d3bd8302-6195-44c4-a6d5-883de21448b7","Content-Type":"application/json"}});function m(e,t,s){t.renderLoading(!0,s),e().then((()=>t.closePopup())).catch((e=>{console.error(`Ошибка: ${e}`)})).finally((()=>{t.renderLoading(!1)}))}const f=new class{constructor(e){let{profileNameSelector:t,profileOccupationSelector:s,profileAvatarSelector:r}=e;this._profileName=document.querySelector(t),this._profileOccupation=document.querySelector(s),this._profileAvatar=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileOccupation.textContent,avatar:this._profileAvatar}}setUserInfo(e){e.name&&(this._profileName.textContent=e.name),e.about&&(this._profileOccupation.textContent=e.about),e.avatar&&(this._profileAvatar.src=e.avatar),e._id&&(this._userId=e._id)}getUserId(){return this._userId}}({profileNameSelector:".profile__name",profileOccupationSelector:".profile__occupation",profileAvatarSelector:".profile__avatar"}),v=new h({popupSelector:"#profile-popup",handlePopupFormSubmit:e=>{m((function(){return c.setUserInfo(e).then((e=>f.setUserInfo(e)))}),v,"Сохранение...")}});v.setEventListeners();const b=new h({popupSelector:"#profile-avatar-popup",handlePopupFormSubmit:e=>{m((function(){return c.setUserAvatar(e).then((e=>f.setUserInfo(e)))}),b,"Сохранение...")}});b.setEventListeners();const S=new class extends _{constructor(e){super(e),this._popupImage=this._popup.querySelector(".popup__image"),this._popupImageCaption=this._popup.querySelector(".popup__image-caption")}openPicturePopup=(e,t)=>{this._popupImage.src=t,this._popupImage.alt=e,this._popupImageCaption.textContent=e,super.openPopup()}}("#picture-popup");function C(e){return c.addLike(e._cardId).then((t=>e.updateLikes(t))).catch((e=>console.error(`Ошибка добавления лайка карточки: ${e}`)))}function E(e){return c.removeLike(e._cardId).then((t=>e.updateLikes(t))).catch((e=>console.error(`Ошибка снятия лайка карточки: ${e}`)))}function L(e,s){return new l(e,s,t,S.openPicturePopup,g,C,E).createCard()}function I(e,t,s){new d({items:e,renderer:L},t,".elements").renderItems(e,t,s)}S.setEventListeners();const k=new h({popupSelector:"#newplace-popup",handlePopupFormSubmit:e=>{m((function(){return c.addCard(e).then((e=>I(e,f.getUserId(),"prepend")))}),k,"Создаем...")}});k.setEventListeners();const y=new class extends _{constructor(e){let{popupSelector:t,handlePopupFormSubmit:s}=e;super(t),this._form=this._popup.querySelector(".popup__form"),this._handlePopupFormSubmit=s,this._submitButton=this._form.querySelector(".popup__submit-button"),this._submitButtonText=this._submitButton.textContent}openCardDeletePopup(e,t){this._cardToDelete=e,this._cardId=t,super.openPopup()}renderLoading(e,t){this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handlePopupFormSubmit(this._cardToDelete,this._cardId)}))}}({popupSelector:"#delete-newplace-popup",handlePopupFormSubmit:(e,t)=>{m((function(){return c.removeCard(t).then((()=>{e.remove(),e=null}))}),y,"Удаление...")}});function g(e,t){y.openCardDeletePopup(e.target.closest(".element"),t)}y.setEventListeners();const q=new p(e,n);q.enableValidation();const B=new p(e,u);B.enableValidation();const P=new p(e,a);P.enableValidation(),r.addEventListener("click",(function(){q.resetErrorsOnInputFields(),v.setInputValues(f.getUserInfo()),v.openPopup()})),o.addEventListener("click",(function(){B.resetErrorsOnInputFields(),b.openPopup()})),i.addEventListener("click",(function(){P.resetErrorsOnInputFields(),k.openPopup()})),Promise.all([c.getUserInfo(),c.getInitialCards()]).then((e=>{let[t,s]=e;f.setUserInfo(t),f.getUserId(),I(s,t._id,"append")})).catch((e=>console.error(`Ошибка загрузки данных с сервера: ${e}`)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,