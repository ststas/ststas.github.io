(()=>{"use strict";const e={formSelector:".popup__form",inputSelector:".popup__field",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",inputErrorClass:"popup__field_type_error",errorClass:"popup__error_visible"},t=document.querySelector(".profile"),s=t.querySelector(".profile__edit-button"),r=t.querySelector(".profile__add-button"),i=document.querySelector("#profile-popup").querySelector(".popup__form"),o=document.querySelector("#newplace-popup").querySelector(".popup__form");class n{constructor(e,t,s){this._title=e.name,this._image=e.link,this._template=t,this._handleCardClick=s}_getTemplate(){return document.querySelector(this._template).content.querySelector(".element").cloneNode(!0)}createCard(){return this._element=this._getTemplate(),this._elementImage=this._element.querySelector(".element__image"),this._elementImage.src=this._image,this._elementImage.alt=this._title,this._element.querySelector(".element__title").textContent=this._title,this._setEventListeners(),this._element}_setEventListeners(){this._likeButton=this._element.querySelector(".element__heart-button"),this._likeButton.addEventListener("click",(()=>{this._likeCard()})),this._element.querySelector(".element__delete-button").addEventListener("click",(()=>{this._deleteCard()})),this._element.querySelector(".element__image").addEventListener("click",(()=>{this._handleCardClick(this._title,this._image)}))}_likeCard=()=>{this._likeButton.classList.toggle("element__heart-button_active")};_deleteCard=()=>{this._element.remove(),this._element=null}}class l{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}enableValidation(){this._setEventListeners()}_setEventListeners(){this._formInputFields=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._formSubmitButton=this._formElement.querySelector(this._submitButtonSelector),this._formInputFields.forEach((e=>{e.addEventListener("input",(()=>{this._inputField=e,this._checkInputValidity(),this._hasInvalidInput(this._formInputFields)?this._disableButton(this._formSubmitButton):this._enableButton(this._formSubmitButton)}))}))}_checkInputValidity(){this._inputField.validity.valid?this._removeErrorMessageAndRedUnderline():this._showErrorMessageAndRedUnderline()}_showErrorMessageAndRedUnderline(){this._formElement.querySelector(`#${this._inputField.id}-error`).classList.add(this._errorClass),this._formElement.querySelector(`#${this._inputField.id}-error`).textContent=this._inputField.validationMessage,this._formElement.querySelector(`#${this._inputField.id}`).classList.add(this._inputErrorClass)}_removeErrorMessageAndRedUnderline(){this._formElement.querySelector(`#${this._inputField.id}-error`).classList.remove(this._errorClass),this._formElement.querySelector(`#${this._inputField.id}-error`).textContent="",this._formElement.querySelector(`#${this._inputField.id}`).classList.remove(this._inputErrorClass)}_enableButton(){this._formSubmitButton.classList.remove(this._inactiveButtonClass),this._formSubmitButton.removeAttribute("disabled")}_disableButton(){this._formSubmitButton.classList.add(this._inactiveButtonClass),this._formSubmitButton.setAttribute("disabled",!0)}resetErrorsOnInputFields(){this._formInputFields.forEach((e=>{this._inputField=e,e.validity.valid||this._removeErrorMessageAndRedUnderline()})),this._disableButton()}_hasInvalidInput=()=>this._formInputFields.some((e=>!e.validity.valid))}class p{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".popup__close-button")}openPopup(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}closePopup(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.closePopup()};_handleCloseButton=()=>{this.closePopup()};_handleClickOnOverlay=e=>{e.target===e.currentTarget&&this.closePopup()};setEventListeners(){this._closeButton.addEventListener("click",this._handleCloseButton),this._popup.addEventListener("click",this._handleClickOnOverlay)}}class u extends p{constructor(e){let{popupSelector:t,handlePopupFormSubmit:s}=e;super(t),this._form=this._popup.querySelector(".popup__form"),this._inputList=this._popup.querySelectorAll(".popup__field"),this._handlePopupFormSubmit=s}getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._handlePopupFormSubmit)}closePopup(){this._form.reset(),super.closePopup()}}const a=new class extends p{constructor(e){super(e),this._popupImage=this._popup.querySelector(".popup__image"),this._popupImageCaption=this._popup.querySelector(".popup__image-caption")}openPicturePopup=(e,t)=>{this._popupImage.src=t,this._popupImage.alt=e,this._popupImageCaption.textContent=e,super.openPopup()}}("#picture-popup");a.setEventListeners();const c=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.prepend(this._renderer(e))}renderItemsfromArray(){this._items.forEach((e=>{this.addItem(e)}))}}({items:[{name:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"},{name:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{name:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{name:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{name:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{name:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"}],renderer:e=>new n(e,"#card-template",a.openPicturePopup).createCard()},".elements"),_=new u({popupSelector:"#newplace-popup",handlePopupFormSubmit:e=>{e.preventDefault(),c.addItem(_.getInputValues()),_.closePopup()}});_.setEventListeners(),c.renderItemsfromArray();const d=new class{constructor(e){let{profileNameSelector:t,profileOccupationSelector:s}=e;this._profileName=document.querySelector(t),this._profileOccupation=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,occupation:this._profileOccupation.textContent}}setUserInfo(e){this._profileName.textContent=e.name,this._profileOccupation.textContent=e.occupation}}({profileNameSelector:".profile__name",profileOccupationSelector:".profile__occupation"}),h=new u({popupSelector:"#profile-popup",handlePopupFormSubmit:e=>{e.preventDefault(),d.setUserInfo(h.getInputValues()),h.closePopup()}});h.setEventListeners();const m=new l(e,i);m.enableValidation();const f=new l(e,o);f.enableValidation(),s.addEventListener("click",(function(){m.resetErrorsOnInputFields(),h.setInputValues(d.getUserInfo()),h.openPopup()})),r.addEventListener("click",(function(){f.resetErrorsOnInputFields(),_.openPopup()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,