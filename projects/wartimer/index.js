(()=>{"use strict";const e=document.querySelector("body"),t=document.querySelector(".header__checkbox"),r=document.querySelector(".header__checkbox-ball"),o=document.querySelector(".header__checkbox-label"),s=document.querySelector(".name"),n=document.querySelectorAll(".timer__numbers"),c=document.querySelectorAll(".timer__title"),l=document.getElementById("days"),a=document.getElementById("hours"),i=document.getElementById("minutes"),u=document.getElementById("seconds"),h=document.querySelector(".footer"),_=document.querySelectorAll(".footer__link"),d=(new Date).getHours(),g=(new Date).getMinutes();function m(e){return e>0&&e<10?`0${e}`:e}function f(){e.classList.toggle("body_theme_light"),o.classList.toggle("header__checkbox-label_checked"),r.classList.toggle("header__checkbox-ball_checked"),s.classList.toggle("name_theme_light"),n.forEach((e=>e.classList.toggle("timer__numbers_theme_light"))),c.forEach((e=>e.classList.toggle("timer__title_theme_light"))),h.classList.toggle("footer_theme_light"),_.forEach((e=>e.classList.toggle("footer__link_theme_light")))}const p=new class{constructor(e){this._apiUrl=e.apiUrl,this._headers=e.headers}_getRes(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(`${this._apiUrl}/${e}`,t).then(this._getRes)}getUserLocation(){return this._request("ipgeo?apiKey=8ffa38ec677445779ee783968bee7e3e",{method:"GET"})}}({apiUrl:"https://api.ipgeolocation.io"}),y=new class{constructor(e){this._apiUrl=e.apiUrl,this._headers=e.headers}_getRes(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(`${this._apiUrl}/${e}`,t).then(this._getRes)}getSunriseSunsetData(e,t){return this._request(`json?lat=${e}&lng=${t}`,{method:"GET"})}}({apiUrl:"https://api.sunrise-sunset.org"});function E(e){const[t,r]=e.split(" ");let[o,s]=t.split(":");return"12"===o&&(o="00"),"PM"===r&&(o=parseInt(o,10)+12),`${m(o)}:${m(s)}`}!function(e){const t=setInterval(r,1e3);function r(){const e=function(e){const t=Date.parse(new Date)-Date.parse(e)-18e6;let r=0,o=0,s=0,n=0,c=0;return t>0&&(r=Math.floor(t/1e3/60/60/24),Math.floor(t/1e3/60/60/24/7),o=Math.floor(t/1e3/60/60%24),s=Math.floor(t/1e3/60%60),n=Math.floor(t/1e3%60)),{total:t,days:r,hours:o,minutes:s,seconds:n}}("2022-02-24");e.total<=0&&clearInterval(t),l.textContent=m(e.days),a.textContent=m(e.hours),i.textContent=m(e.minutes),u.textContent=m(e.seconds)}r()}(),p.getUserLocation().then((e=>y.getSunriseSunsetData(e.latitude,e.longitude).then((e=>{const t=E(e.results.sunrise),r=E(e.results.astronomical_twilight_end);!function(e,t,r,o){const s=`${m(e)}:${m(t)}`;s>=r&&s<=o&&f()}(d,g,t,r)})).catch((e=>console.error("Error:",e))))).catch((e=>console.error("Error:",e))),t.addEventListener("change",f),r.addEventListener("click",f)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,